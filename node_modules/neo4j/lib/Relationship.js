/*** Generated by streamline 0.4.3 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; (function() {
  var PropertyContainer, Relationship, adjustError, status, util, __hasProp = {
  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  status = require("http-status");

  util = require("./util");

  adjustError = util.adjustError;

  PropertyContainer = require("./PropertyContainer");

  module.exports = Relationship = (function(_super) {
    var get, set, _this = this;


    __extends(Relationship, _super);

    function Relationship(db, data, start, end) {
      var Node;
      Relationship.__super__.constructor.call(this, db, data);
      Node = require("./Node");
      this._start = (start || new Node(db, {
        self: data.start }));

      this._end = (end || new Node(db, {
        self: data.end })); };



    get = function(props) {
      var getter, name, _results;
      _results = [];
      for (name in props) {
        getter = props[name];
        _results.push(Relationship.prototype.__defineGetter__(name, getter)); };

      return _results; };


    set = function(props) {
      var name, setter, _results;
      _results = [];
      for (name in props) {
        setter = props[name];
        _results.push(Relationship.prototype.__defineSetter__(name, setter)); };

      return _results; };


    get({
      start: function() {
        return (this._start || null); } });



    get({
      end: function() {
        return (this._end || null); } });



    get({
      type: function() {
        return this._data.type; } });



    Relationship.prototype.save = function Relationship_prototype_save__1(_) { var message, response, __this = this; var __frame = { name: "Relationship_prototype_save__1", line: 70 }; return __func(_, this, arguments, Relationship_prototype_save__1, 0, __frame, function __$Relationship_prototype_save__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$Relationship_prototype_save__1() { return (function __$Relationship_prototype_save__1(__then) {


                if (__this.exists) {
                  return __this._request.put({
                    uri: (("" + __this.self) + "/properties"),
                    json: __this.data }, __cb(_, __frame, 4, 21, function ___(__0, __1) { response = __1;

                    if ((response.statusCode !== status.NO_CONTENT)) {
                      message = "";
                      switch (response.statusCode) {
                      case status.BAD_REQUEST: message = "Invalid data sent";
                        break;
                      case status.NOT_FOUND:
                        message = "Relationship not found";
                      };

                      return _(new Error(message)); } ; __then(); }, true)); } else { __then(); } ; })(__then); }); })(function ___(error, __result) { __tryCatch(_, function __$Relationship_prototype_save__1() { if (error) {



                return _(adjustError(error)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); }); };



    Relationship.prototype.del = Relationship.prototype["delete"];

    return Relationship;

  }).call(this, PropertyContainer);

}).call(this);